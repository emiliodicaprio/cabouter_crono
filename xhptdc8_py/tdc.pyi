"""
This type stub file was generated by cyright.
"""

from .crono_interface import *
from .xhptdc8_interface import *

def py_print_error():  # -> None:
    ...
def get_grouping():  # -> unsigned char:
    ...
def initialize_tdc(buffer_size: int):  # -> int:
    ...
def get_default_configuration():  # -> unsigned char:
    ...
def start_capture() -> None:
    """Start data acquisition.
    Device manager must be initialized.
    """
    ...

def pause_capture() -> None:
    """Pauses data acquisition. This does not allow for a change in configuration."""
    ...

def continue_capture() -> None:
    """Continues data acquisition. This does not allow for a change in configuration."""
    ...

def stop_capture() -> None:
    """Stop data acquision.
    Device manager must be initialized.
    """
    ...

def software_trigger(index: int) -> None:
    """Generates a software trigger event."""
    ...

class Static_info:
    """Structure containing static information about the board that does not change during run time.
    It is provided by the function get_static_info()
    """
    def __init__(self) -> None: ...
    @property
    def version(self) -> int:
        """A version number which increases when the definition of the structure is changed"""
        ...

    @property
    def board_id(self) -> int:
        """ID of the board. All xHPTDC8-PCIe boards in the system are numbered in order of serial number,
        starting at zero."""
        ...

    @property
    def driver_revision(self) -> int:
        """Encoded version number for the driver.
        The lower three bytes contain a triple level hierarchy of version
        numbers. E.g. 0x010103 codes version 1.1.3.

        A change in the first digit generally requires a recompilation of user applications. Change in the second digit denote significant improvements or changes that don't break compatibility and the third digit changes with minor bugfixes and the like."""
        ...

    @property
    def driver_build_revision(self) -> int:
        """The build number of the driver according to cronologic's internal versioning system."""
        ...

    @property
    def firmware_revision(self) -> int:
        """Revision number of the FPGA configuration."""
        ...

    @property
    def board_revision(self) -> int:
        """Board revision number.
        The board revision number can be read from a register. It is a four
        bit number that changes when the schematic of the board is changed.
        - 0: Experimental first board Version. Labeled "Rev. 1"
        - 2: First commercial Version. Labeled "Rev. 2"
        """
        ...

    @property
    def board_configuration(self) -> int:
        """Describes the schematic configuration of the board.

        The same board schematic can be populated in multiple variants. This is a eight bit-code that can be read from a register.
        """
        ...

    @property
    def subversion_revision(self) -> int:
        """Subversion revision id of the FPGA configuration.
        A number to track builds of the firmware in more detail than the firmware revision. It changes with every change in the firmware, even if there is no visible effect for the user. The subversion revision number can be read from a register."""
        ...

    @property
    def chip_id(self) -> list:
        """16bit factory ID of the TDC chip.

        This is the chipID as read from the 16 bit TDC chip id register."""
        ...

    @property
    def board_serial(self) -> int:
        """Serial number

        With year and number running in 8.24 format. The number is identical to the one printed on the silvery sticker on the board.

        """
        ...

    @property
    def flash_serial_high(self) -> int:
        """High 32 bits of 64 bit manufacturer serial number of the flash chip."""
        ...

    @property
    def flash_serial_low(self) -> int:
        """Low 32 bits of 64 bit manufacturer serial number of the flash chip."""
        ...

    @property
    def flash_valid(self) -> bool:
        """Calibration data read from flash is valid.

        If not 'False', the driver found valid calibration data in the flash on the board and is using it."""
        ...

def get_static_info(index: int) -> None:
    """Returns static information about the device."""
    ...

def close() -> None:
    """Finalize the driver for this device."""
    ...

def start_tiger(index: int) -> None:
    """Start the timing generator of an individual board.
    This can be done independently of the state of the data acquisition."""
    ...

def stop_tiger(index: int) -> None:
    """Stops the timing generator of an individual board.
    This can be done independently of the state of the data acquisition."""
    ...

def print_device_info():  # -> None:
    ...
def count_devices() -> int:
    """Returns the number of boards present in the system that are supported by the current driver."""
    ...

def get_driver_revision() -> int:
    """Returns the driver version, same format as static_info.driver_revision.
    This function does not require a xHPTDC8_PCIe board to be present."""
    ...

def get_driver_revision_str() -> str:
    """Returns the driver version, including SVN build revision as a string.
    This function does not require a xHPTDC8_PCIe board to be present."""
    ...

def device_state_to_str(state: int) -> str:
    """Returns the device state in string format."""
    ...
